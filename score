#!/bin/bash

WORKDIR=".timeData"
MAXTIME=60

# Create test artefact directory
mkdir -p $WORKDIR

# Tests the correctness of a given puzzle against reference
# Arguments:
#   0) Engine-name
#   1) U
function scorePuzzle()
{
  # Input parameter parsing
  local __engine=$1
  local __U=$2

  # Determine puzzle name to check ref
  local __puzzle=${__engine%%.*}

  echo "Scoring : $__engine"

  local __startTime=$(date +%s)
  local __cumTime=0

  for i in `seq 1 1000`;
  do
    # Recall math computations:
    # x=a^^b
    # ln(x)=ln(a^^b)
    # ln(x)=b*ln(a)
    # exp(ln(x))=exp(b*ln(a))
    # x=(exp(b*ln(a))
    local __scale=$(
    case "$__puzzle" in
      ("rank") echo "$(echo "scale=3; 50+($i*30+$__U*20)^2" | bc)" ;;
      #("decompose") echo "$(echo "scale=3; 20+($i*30+$__U*10)^1.2" | bc)" ;;
      ("decompose") echo "$(echo "scale=3; 20+e(1.2*l($i*30+$__U*10))" | bc -l)" ;;
      ("ising") echo "$(echo "scale=3; 20+($i*20+$__U*5)" | bc)" ;;
      ("integral") echo "$(echo "scale=3; 20+($i*20+$__U*5)" | bc)" ;;
    esac)

    # Execute testing
    #bin/create_puzzle_input ${__puzzle} ${__scale} 0 > ${WORKDIR}/${__puzzle}.${__scale}.input 2> /dev/null
    # { time ((cat ${WORKDIR}/${__puzzle}.${__scale}.input | bin/execute_puzzle ${__engine} 0 > ${WORKDIR}/${__puzzle}.${__scale}.${__engine}.got 2> /dev/null) |& awk '/real/{print $2}') ; } 2> ${WORKDIR}/time.out
    #cat ${WORKDIR}/${__puzzle}.${__scale}.input | (time bin/execute_puzzle ${__engine} 0 >/dev/null 2&>1) 2>&1 | head -2 | awk '/real/{print $2}' > ${WORKDIR}/time.out

    bin/create_puzzle_input ${__puzzle} ${__scale} 0 2>/dev/null | bin/execute_puzzle ${__engine}  0 2>/dev/null | grep -a 'TIME: ' | awk '{print $2}' > ${WORKDIR}/time.out

    # local __timeTime=$(head -2 ${WORKDIR}/time.out | awk '{match($0,"[0-9]+.[0-9]{3}",a)}END{print a[0]}')
    local __timeTime=$(cat ${WORKDIR}/time.out | awk '{match($0,"[0-9]+.[0-9]{3}",a)}END{print a[0]}')
    local __curTime=$(date +%s)
    local __timeDiff=`expr $__curTime - $__startTime`
    __cumTime=$(echo "scale=3; $__cumTime + $__timeTime" | bc)

    printf "\r[Timer ${__cumTime}s] | Engine: $__engine | Scale: $__scale | Latest Execution: ${__timeTime}s | Iter: $i "
    #echo "Engine $__engine | Scale: $__scale | Time: $__timeTime | Total: $__timeDiff"

    local __score=`expr $i - 1`
    if (( $(echo "$__cumTime > $MAXTIME" | bc -l) )); then
      echo ""
      echo ">>>>>>>>>>>>>>>>>>>"
      echo "Score was: $__score"
      echo ">>>>>>>>>>>>>>>>>>>"
      break
    fi

done

  echo ""
}

# Simple Correctness
#scorePuzzle rank.opencl 0
#scorePuzzle rank.tbb 0
scorePuzzle rank.ref 0
##########################################################################
#scorePuzzle rank.ref 0.5
##########################################################################
#scorePuzzle ising.opt 0.5
##########################################################################
scorePuzzle ising.opt 0.5
##########################################################################
scorePuzzle ising.ref 0.5
##########################################################################

# Clean up the testing
rm -rf $WORKDIR